{"version":3,"sources":["../src/Location.jsx"],"names":["NO_MATCHING","DEFAULT_COUNTRY","compose","fns","arguments","result","i","length","call","Location","props","inputProps","_googlePredictions","_country","country","_noMatching","noMatching","input","config","minChars","keepListItems","sort","item","text","$","create","innerHTML","replace","RegExp","regExpEscape","trim","findDOMNode","_autocomplete","addEventListener","_handleAutocompleteSelect","bind","_handleInputChange","event","value","_getInputValue","updateAutocomplete","evaluate","list","map","description","results","fail","navKeys","isItNavKey","indexOf","keyCode","_getPredictions","then","find","l","filter","validate","place_id","getPlaceId","success","location","onLocationSet","coords","lat","geometry","lng","postalcode","address_components","types","long_name","_getCoordinates","service","google","createAutocompleteService","isThereAnyText","resolve","reject","getPlacePredictions","componentRestrictions","placeId","geocoder","createGeocoder","geocode","status","Component","defaultProps","className","style","propTypes","PropTypes","func","object","string"],"mappings":"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","file":"Location.js","sourcesContent":["'use strict';\r\n\r\nimport React from 'react';\r\nimport ReactDom from 'react-dom';\r\nimport Awesomplete from 'awesomplete';\r\nimport Promise from 'promise-polyfill';\r\nimport google from './vendor/google';\r\n\r\nconst NO_MATCHING = 'Unrecognised {{value}}, please check and re-enter.';\r\nconst DEFAULT_COUNTRY = 'US';\r\n\r\nvar compose = function () {\r\n  var fns = arguments;\r\n\r\n  return function (result) {\r\n    for (let i = fns.length - 1; i >= 0; i--) {\r\n      result = fns[i].call(this, result);\r\n    }\r\n    return result;\r\n  };\r\n};\r\n\r\nexport default class Location extends React.Component {\r\n\r\n  render() {\r\n    return <input type='text' {...this.props.inputProps} />;\r\n  }\r\n\r\n  componentWillMount() {\r\n    this._googlePredictions = [];\r\n    this._country = this.props.country || DEFAULT_COUNTRY;\r\n    this._noMatching = this.props.noMatching || NO_MATCHING;\r\n  }\r\n\r\n  componentDidMount() {\r\n    var input;\r\n    var config = {\r\n      minChars: 1,\r\n      keepListItems: false,\r\n      sort: function () { return 0; },\r\n      item: function (text, input) {\r\n        return Awesomplete.$.create('li', {\r\n          innerHTML: text.replace(\r\n            RegExp(Awesomplete.$.regExpEscape(input.trim()), 'gi'),\r\n            '<mark>$&</mark>'\r\n          ),\r\n          'aria-selected': 'false'\r\n        });\r\n      }\r\n    };\r\n\r\n    input = ReactDom.findDOMNode(this);\r\n    this._autocomplete = new Awesomplete(input, config);\r\n\r\n    input.addEventListener(\r\n      'awesomplete-selectcomplete',\r\n      this._handleAutocompleteSelect.bind(this)\r\n    );\r\n    input.addEventListener(\r\n      'keyup',\r\n      this._handleInputChange.bind(this)\r\n    );\r\n  }\r\n\r\n  updateCountry(country) {\r\n    this._country = country;\r\n  }\r\n\r\n  _handleInputChange(event) {\r\n    var value = this._getInputValue();\r\n    var updateAutocomplete = compose(\r\n      this._autocomplete.evaluate.bind(this._autocomplete),\r\n      (list) => this._autocomplete.list = list,\r\n      (list) => list.map((item) => item.description),\r\n      (results) => this._googlePredictions = results\r\n    );\r\n    var fail = compose(\r\n      updateAutocomplete,\r\n      (text) => [{ description: text }],\r\n      (text) => {\r\n        return this._noMatching.replace('{{value}}', text);\r\n      }\r\n    );\r\n    var navKeys = [38, 40, 13, 27];\r\n    var isItNavKey = navKeys.indexOf(event.keyCode) >= 0;\r\n\r\n    if (!isItNavKey) {\r\n      this._getPredictions(value).then(updateAutocomplete, fail);\r\n    }\r\n  }\r\n\r\n  _handleAutocompleteSelect() {\r\n    var value = this._getInputValue();\r\n    var find = (list) => {\r\n      let l = list.filter(item => item.description === value);\r\n\r\n      return l.length > 0 ? l[0] : false;\r\n    };\r\n    var validate = item => item && item.place_id ? item.place_id : false;\r\n    var getPlaceId = compose(validate, find);\r\n    var success = (location) => {\r\n      this.props.onLocationSet && this.props.onLocationSet({\r\n        description: value,\r\n        coords: {\r\n          lat: location.geometry.location.lat(),\r\n          lng: location.geometry.location.lng()\r\n        },\r\n        postalcode:(location.address_components.find((value)=>{\r\n          return value.types.indexOf('postal_code')>=0;\r\n        })||{long_name:null}).long_name\r\n      });\r\n    };\r\n\r\n    this._getCoordinates(getPlaceId(this._googlePredictions)).then(success);\r\n  }\r\n\r\n  _getInputValue() {\r\n    return ReactDom.findDOMNode(this).value;\r\n  }\r\n\r\n  _getPredictions(text) {\r\n    var service = (this.props.google || google).createAutocompleteService();\r\n    var isThereAnyText = !!text;\r\n\r\n    if (isThereAnyText) {\r\n      return new Promise((resolve, reject) => {\r\n        service.getPlacePredictions({\r\n          input: text,\r\n          componentRestrictions: { country: this._country },\r\n          types: ['(regions)']\r\n        }, (result) => {\r\n          if (result !== null) {\r\n            resolve(result);\r\n          } else {\r\n            reject(text);\r\n          }\r\n        });\r\n      });\r\n    }\r\n    return new Promise((resolve, reject) => {});\r\n  }\r\n\r\n  _getCoordinates(placeId) {\r\n    var geocoder = (this.props.google || google).createGeocoder();\r\n\r\n    return new Promise((resolve, reject) => {\r\n      geocoder.geocode({ placeId: placeId }, (results, status) => {\r\n        if (status === 'OK' && results && results.length > 0) {\r\n          resolve(results[0]);\r\n        } else {\r\n          reject(false);\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n};\r\n\r\nLocation.defaultProps = {\r\n  className: '',\r\n  style: {}\r\n};\r\n\r\nLocation.propTypes = {\r\n  onLocationSet: React.PropTypes.func,\r\n  inputProps: React.PropTypes.object,\r\n  country: React.PropTypes.string,\r\n  noMatching: React.PropTypes.string,\r\n  google: React.PropTypes.object\r\n};\r\n"]}